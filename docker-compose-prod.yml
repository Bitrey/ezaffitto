version: "3.8"

secrets:
  turnstile_secret:
    file: "./secrets/turnstile_secret.secret"
  geolocation_api_key:
    file: "./secrets/geolocation_api_key.secret"
  openai_api_key:
    file: "./secrets/openai_api_key.secret"
  fb_account_email:
    file: "./secrets/fb_account_email.secret"
  fb_account_password:
    file: "./secrets/fb_account_password.secret"
  mongodb_uri:
    file: "./secrets/mongodb_uri.secret"

services:
  parser:
    build:
      context: ./parser
      dockerfile: Dockerfile.prod
    secrets:
      - openai_api_key
    restart: unless-stopped
    volumes:
      - ./parser:/usr/src/app
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MAIN_PROMPT_PATH=./prompt1.txt
      - DESCRIPTION_PROMPT_PATH=./prompt2.txt
      - DEBUG_START_EXPRESS_SERVER=true
      - PING_SERVER_PORT=3434
    networks:
      - db-api-network
    depends_on:
      db-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "8080:80" # servizio pubblico
    depends_on:
      db-api:
        condition: service_healthy
    networks:
      - public-network

  fb-scraper:
    build:
      context: ./fb-scraper
      dockerfile: Dockerfile.prod
    secrets:
      - fb_account_email
      - fb_account_password
      - geolocation_api_key
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PING_SERVER_PORT=3434
    depends_on:
      db-api:
        condition: service_healthy
      parser:
        condition: service_healthy
    networks:
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  subito-scraper:
    build:
      context: ./subito-scraper
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    depends_on:
      db-api:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PING_SERVER_PORT=3434
    networks:
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "bun run /usr/src/app/healthcheck.js || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  zappyrent-scraper:
    build:
      context: ./zappyrent-scraper
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PING_SERVER_PORT=3434
    depends_on:
      db-api:
        condition: service_healthy
    networks:
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "bun run /usr/src/app/healthcheck.js || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  bakeca-scraper:
    build:
      context: ./bakeca-scraper
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PING_SERVER_PORT=3434
    depends_on:
      db-api:
        condition: service_healthy
    networks:
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  # db-consumer da rifare con Bun

  db-api:
    build:
      context: ./db-api
      dockerfile: Dockerfile.prod
    secrets:
      - mongodb_uri
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5500
    networks:
      - db-network
      - db-api-network
    healthcheck:
      test:
        ["CMD-SHELL", "wget -q -O- http://localhost:5500/api/v1/ping || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  client-api:
    build:
      context: ./client-api
      dockerfile: Dockerfile.prod
    secrets:
      - turnstile_secret
      - mongodb_uri
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=6500
    networks:
      - db-network
      - public-network
    healthcheck:
      test:
        ["CMD-SHELL", "wget -q -O- http://localhost:6500/api/v1/ping || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

volumes:
  db-data:
    driver: local

networks:
  db-network:
    driver: bridge
  db-api-network:
    driver: bridge
  public-network:
    driver: bridge
