version: '3.8'

services:
  parser:
    build: ./parser
    volumes:
      - ./parser:/usr/src/app
    command: npm start
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PYTHON_PARSER_PATH=./parser.py
      - PROMPT_PATH=./prompt.txt
    ports:
      - "3000:3000" # DEBUG, in prod solo Kafka
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka
      - rotating_tor


  telegram-bot:
    build: ./telegram-bot
    volumes:
      - ./telegram-bot:/usr/src/app
    command: npm start
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PYTHON_PARSER_PATH=./parser.py
      - PROMPT_PATH=./prompt.txt
    depends_on:
      parser:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - kafka

  scraper:
    build: ./scraper
    volumes:
      - ./scraper:/usr/src/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka

  kreader_test:
    build: ./reader
    volumes:
      - ./reader:/usr/src/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka


  rotating_tor:
    image: 'mattes/rotating-proxy'
    environment:
      - tors=25
    networks:
      - rotating_tor

  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --create --if-not-exists && kafka-topics.sh --bootstrap-server kafka:9092 --topic hc --describe || exit 1"]
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 5
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAKFA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - FIRST_BROKER_ID=1001
    logging:
      driver: none # DEBUG - togli se necessario

   #remote_chrome:
   #  image: 'selenium/standalone-chrome'
   #  shm_size: '1gb'
   #  ports:
   #    - "4444:4444"
   #    - "7900:7900"

   #  networks:
   #    - remote_chrome

volumes:
  kafka_data:
    driver: local

networks:
  kafka:
    driver: bridge

  rotating_tor:
    driver: bridge
  #remote_chrome:
    #driver: bridge
