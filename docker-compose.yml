version: "3.8"

secrets:
  turnstile_secret:
    file: "./secrets/turnstile_secret.secret"
  geolocation_api_key:
    file: "./secrets/geolocation_api_key.secret"
  openai_api_key:
    file: "./secrets/openai_api_key.secret"
  fb_account_email:
    file: "./secrets/fb_account_email.secret"
  fb_account_password:
    file: "./secrets/fb_account_password.secret"

services:
  parser:
    build: ./parser
    secrets:
      - openai_api_key
    restart: unless-stopped
    volumes:
      - ./parser:/usr/src/app
    environment:
      - NODE_ENV=development
      - MAIN_PROMPT_PATH=./prompt1.txt
      - DESCRIPTION_PROMPT_PATH=./prompt2.txt
      - DEBUG_START_EXPRESS_SERVER=true
      - PING_SERVER_PORT=3434
    ports:
      - "3000:3000" # DEBUG!!
    networks:
      - rabbitmq-network
      - db-api-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  webapp:
    build: ./webapp
    restart: unless-stopped
    volumes:
      - ./webapp:/usr/src/app
    environment:
      - NODE_ENV=development
      - PORT=6969
    ports:
      - "6969:6969" # servizio pubblico
    depends_on:
      db-api:
        condition: service_healthy
    networks:
      - db-api-network

  fb-scraper:
    build: ./fb-scraper
    secrets:
      - fb_account_email
      - fb_account_password
      - geolocation_api_key
    restart: unless-stopped
    volumes:
      - ./fb-scraper:/usr/src/app
      - /usr/bin/google-chrome:/usr/bin/google-chrome
    environment:
      - NODE_ENV=development
      - PING_SERVER_PORT=3434
    depends_on:
      rabbitmq:
        condition: service_healthy
      parser:
        condition: service_healthy
    networks:
      - rabbitmq-network
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  subito-scraper:
    build: ./subito-scraper
    restart: unless-stopped
    volumes:
      - ./subito-scraper:/usr/src/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PING_SERVER_PORT=3434
    networks:
      - rabbitmq-network
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "bun run /usr/src/app/healthcheck.js || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  zappyrent-scraper:
    build: ./zappyrent-scraper
    restart: unless-stopped
    volumes:
      - ./zappyrent-scraper:/usr/src/app
    environment:
      - PING_SERVER_PORT=3434
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitmq-network
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "bun run /usr/src/app/healthcheck.js || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  bakeca-scraper:
    build: ./bakeca-scraper
    restart: unless-stopped
    volumes:
      - ./bakeca-scraper:/usr/src/app
      - /usr/bin/google-chrome:/usr/bin/google-chrome
    environment:
      - PING_SERVER_PORT=3434
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitmq-network
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    ports:
      - "5672:5672" # DEBUG
      - "15672:15672" # DEBUG (Web UI)
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - rabbitmq-network
    depends_on:
      # TODO only for debug, use RabbitMQ in production
      db-api:
        condition: service_healthy

  mongodb:
    image: mongo:6.0.7-jammy
    restart: unless-stopped
    ports:
      - "27018:27017" # per non collidere con il db locale
    volumes:
      - db-data:/data/db
    networks:
      - db-network # non esporlo ad altri servizi se non db-api
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/ezaffitto-dev --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  # db-consumer da rifare con Bun

  db-api:
    build: ./db-api
    secrets:
      - turnstile_secret
    restart: unless-stopped
    volumes:
      - ./db-api:/usr/src/app
    ports:
      - "5500:5500" # hard-coded in giro, non cambiare
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/ezaffitto-dev
      - PORT=5500
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - db-network
      - db-api-network
    healthcheck:
      test:
        ["CMD-SHELL", "wget -q -O- http://localhost:5500/api/v1/ping || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7.0.12-alpine
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    ports:
      - "6380:6379" # per non collidere con il redis locale
    networks:
      - redis-network
    command: redis-server --loglevel warning
    volumes:
      - redis-data:/data

  # logging
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080

volumes:
  db-data:
    driver: local
  rabbitmq-data:
    driver: local
  redis-data:
    driver: local

networks:
  rabbitmq-network:
    driver: bridge
  db-network:
    driver: bridge
  db-api-network:
    driver: bridge
  redis-network:
    driver: bridge
