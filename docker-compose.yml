version: "3.8"

services:
  parser:
    build: ./parser
    restart: unless-stopped
    volumes:
      - ./parser:/usr/src/app
    environment:
      - NODE_ENV=development
      - PROMPT_PATH=./prompt.txt
      - DEBUG_START_EXPRESS_SERVER=false
    ports:
      - "3000:3000" # DEBUG!!
    networks:
      - rabbitmq-network
      - db-api-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      db-consumer:
        condition: service_healthy

  telegram-bot:
    build: ./telegram-bot
    restart: unless-stopped
    volumes:
      - ./telegram-bot:/usr/src/app
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PROMPT_PATH=./prompt.txt
    depends_on:
      db-api:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitmq-network
      - db-api-network
      - redis-network

  webapp:
    build: ./webapp
    restart: unless-stopped
    volumes:
      - ./webapp:/usr/src/app
    environment:
      - NODE_ENV=development
    ports:
      - "6969:6969" # servizio pubblico
    depends_on:
      db-api:
        condition: service_healthy
    networks:
      - db-api-network

  # fb-scraper:
  #   build: ./fb-scraper
  #   restart: unless-stopped
  #   volumes:
  #     - ./fb-scraper:/usr/src/app
  #   environment:
  #     - NO_LOGIN=true
  #     - GROUPS_FILE=groups.json
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #     db-consumer:
  #       condition: service_healthy
  #   networks:
  #     - rabbitmq-network

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    ports:
      - "5672:5672" # DEBUG
      - "15672:15672" # DEBUG (Web UI)
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - rabbitmq-network

  mongodb:
    image: mongo:6.0.7-jammy
    restart: unless-stopped
    ports:
      - "27018:27017" # per non collidere con il db locale
    volumes:
      - db-data:/data/db
    networks:
      - db-network # non esporlo ad altri servizi se non db-api
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb:27017/ezaffitto-dev --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  db-consumer:
    build: ./db-consumer
    restart: unless-stopped
    volumes:
      - ./db-consumer:/usr/src/app
    ports:
      - "3434:3434" # DEBUG - ha solo una route /ping per verificare che worka
    environment:
      - NODE_ENV=development
      - PING_SERVER_PORT=3434
    depends_on:
      db-api:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitmq-network
      - db-api-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O- http://localhost:3434/ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  db-api:
    build: ./db-api
    restart: unless-stopped
    volumes:
      - ./db-api:/usr/src/app
    ports:
      - "5500:5500" # hard-coded in giro, non cambiare
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/ezaffitto-dev
      - PORT=5500
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - db-network
      - db-api-network
    healthcheck:
      test:
        ["CMD-SHELL", "wget -q -O- http://localhost:5500/api/ping || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7.0.12-alpine
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    ports:
      - "6380:6379" # per non collidere con il redis locale
    networks:
      - redis-network
    command: redis-server --loglevel warning
    volumes:
      - redis-data:/data

volumes:
  db-data:
    driver: local
  rabbitmq-data:
    driver: local
  redis-data:
    driver: local

networks:
  rabbitmq-network:
    driver: bridge
  db-network:
    driver: bridge
  db-api-network:
    driver: bridge
  redis-network:
    driver: bridge
